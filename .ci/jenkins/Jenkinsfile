@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'rhel8 && !built-in'
    }
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }
    options {
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    githubscm.checkoutIfExists('kogito-images', getChangeAuthor(), getChangeBranch(), 'kiegroup', getChangeTarget(), true)
                }
            }
        }
        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    sh '''
                        curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/v1.3.6/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                        tar -xzvf cekit-image-validator-runner.tgz
                        chmod +x cekit-image-validator-runner
                    '''
                    sh './cekit-image-validator-runner modules/'
                    getImages().each { image -> sh "./cekit-image-validator-runner ${image}-image.yaml" }
                }
            }
        }
        stage('Build & Test Images') {
            steps {
                script {
                    parallelStages = [:]
                    for(String image : getImages()){
                        parallelStages[image] = createBuildAndTestStageClosure(image)
                    }
                    parallel parallelStages
                }
            }
        }
    }
    post {
        always {
            script {
                clean()
            }
        }
        unsuccessful {
            script {
                pullrequest.postComment(util.getMarkdownTestSummary(isProdCI() ? 'Prod' : 'PR', '', "${BUILD_URL}", 'GITHUB'))
            }
        }
    }
}

void clean() {
    util.cleanNode()
}

Closure createBuildAndTestStageClosure(String image) {
    return {
        stage("Build&Test ${image}") {
            List buildParams = []
            buildParams.add(string(name: "DISPLAY_NAME", value: "PR #${ghprbPullId} - ${image}: ${ghprbPullLink}"))
            buildParams.add(string(name: 'BUILD_IMAGE_NAME', value: image))
            buildParams.add(string(name: 'SOURCE_AUTHOR', value: getChangeAuthor()))
            buildParams.add(string(name: 'SOURCE_BRANCH', value: getChangeBranch()))
            buildParams.add(string(name: 'TARGET_BRANCH', value: getChangeTarget()))
            buildParams.add(string(name: 'BUILD_KOGITO_APPS_REF', value: getChangeTarget()))

            def job = build(job: "kogito-images.build-image", wait: true, parameters: buildParams, propagate: false)
            if (job.result != 'SUCCESS') {
                if (job.result == 'UNSTABLE') {
                    unstable("Tests on ${image} seems to have failed")
                } else {
                    error("Error building ${image}. Please check the logs of the job: ${job.absoluteUrl}")
                }
            }
        }
    }
}

String[] getImages() {
    if (env.IMAGES_LIST) {
        return env.IMAGES_LIST.split(',')
    }
    String listCmd = 'make list'
    if (isProdCI()) {
        listCmd += ' arg=--prod'
    }
    return util.runWithPythonVirtualEnv("${listCmd} | tr '\\n' ','", 'cekit', true).trim().split(',')
}

boolean isProdCI() {
    return env.PROD_CI ? env.PROD_CI.toBoolean() : false
}

String getChangeAuthor() {
    return env.ghprbAuthorRepoGitUrl ? util.getGroup(env.ghprbAuthorRepoGitUrl) : (env.ghprbPullAuthorLogin ?: CHANGE_AUTHOR)
}

String getChangeBranch() {
    return env.ghprbSourceBranch ?: CHANGE_BRANCH
}

String getChangeTarget() {
    return env.ghprbTargetBranch ?: CHANGE_TARGET
}
