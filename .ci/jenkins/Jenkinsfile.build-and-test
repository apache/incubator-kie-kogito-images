/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }
    options {
        timeout(time: 240, unit: 'MINUTES')
        skipDefaultCheckout()
    }
    stages {
        stage('Initialization') {
            steps {
                script {
                    util.waitForDocker()
                    sh 'printenv'
                    
                    dir(getRepoName()) {
                        // TODO Test pupose
                        deleteDir()
                        githubscm.checkoutIfExists(getRepoName(), getChangeAuthor(), getChangeBranch(), 'apache', getChangeTarget(), true, credentials = [token: getGitAuthorTokenCredentialsId(), usernamePassword: getGitAuthorCredentialsId()])
                    }
                }
            }
        }
        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    dir(getRepoName()) {
                        sh '''
                            curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/v1.3.6/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                            tar -xzvf cekit-image-validator-runner.tgz
                            chmod +x cekit-image-validator-runner
                        '''
                        sh './cekit-image-validator-runner modules/'
                        getImages().each { image -> sh "./cekit-image-validator-runner ${image}-image.yaml" }
                    }
                }
            }
        }
        stage('Build & Test Images') {
            steps {
                script {
                    dir(getRepoName()) {
                        githubscm.prepareCommitStatusInformationForPullRequest(getRepoName(), getChangeAuthor(), getChangeBranch(), 'apache', getGitAuthorCredentialsId())
                        parallelStages = [:]
                        for(String image : getImages()){
                            parallelStages[image] = createBuildAndTestStageClosure(image)
                        }
                        parallel parallelStages
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                pullrequest.postComment(util.getMarkdownTestSummary('PR', '', "${BUILD_URL}", 'GITHUB'))
            }
        }
    }
}

Closure createBuildAndTestStageClosure(String image) {
    return {
        stage("Build&Test ${image}") {
            List buildParams = []
            buildParams.add(string(name: "DISPLAY_NAME", value: "PR #${getChangeId()} - ${image}: ${getChangeUrl()}"))
            buildParams.add(string(name: 'BUILD_IMAGE_NAME', value: image))
            buildParams.add(string(name: 'SOURCE_AUTHOR', value: getChangeAuthor()))
            buildParams.add(string(name: 'SOURCE_BRANCH', value: getChangeBranch()))
            buildParams.add(string(name: 'TARGET_BRANCH', value: getChangeTarget()))
            buildParams.add(string(name: 'BUILD_KOGITO_APPS_REF', value: getChangeTarget()))

            githubscm.updateGithubCommitStatus(image, 'PENDING', 'Queued', getRepoName())

            // Keep executing so we can cancel all if needed
            def job = build(job: 'kogito-images.build-image', wait: true, parameters: buildParams, propagate: false)
            if (job.result != 'SUCCESS') {
                if (job.result == 'UNSTABLE') {
                    unstable("Tests on ${image} seems to have failed")
                } else {
                    error("Error building ${image}. Please check the logs of the job: ${job.absoluteUrl}")
                }
            }
        }
    }
}

String[] getImages() {
    if (env.IMAGES_LIST) {
        return env.IMAGES_LIST.split(',')
    }
    return sh(returnStdout: true, script: "make list | tr '\\n' ','").trim().split(',')
}

String getChangeAuthor() {
    return SOURCE_AUTHOR
}

String getChangeBranch() {
    return SOURCE_BRANCH
}

String getChangeTarget() {
    return TARGET_BRANCH
}

String getChangeId() {
    return CHANGE_ID
}

String getChangeUrl() {
    return CHANGE_URL
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthorCredentialsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorTokenCredentialsId() {
    return env.GIT_AUTHOR_TOKEN_CREDS_ID
}
