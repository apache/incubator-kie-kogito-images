/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
            alwaysPull true
        }
    }
    options {
        timeout(time: 150, unit: 'MINUTES')
        skipDefaultCheckout()
    }
    environment {
        // Linked to node label
        // Use docker due to multiplatform build
        CONTAINER_ENGINE = 'docker'
        CONTAINER_ENGINE_TLS_OPTIONS = ''

        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        IMAGE_BUILD_PLATFORMS = 'linux/amd64,linux/arm64'
    }
    stages {
        stage('Initialization') {
            steps {
                script {
                    util.waitForDocker()
                    sh 'printenv'

                    assert getBuildImageName() : 'Please provide `BUILD_IMAGE_NAME` parameter'
                    currentBuild.displayName = params.DISPLAY_NAME ?: currentBuild.displayName

                    if (getTargetBranch()) {
                        echo 'Got a target branch ... Trying to merge the source with the target'
                        githubscm.checkoutIfExists(getRepoName(), getSourceAuthor(), getSourceBranch(), getTargetAuthor(), getTargetBranch(), true, [ token: getGitAuthorTokenCredentialsId(), usernamePassword: getGitAuthorCredentialsId() ])
                        githubscm.prepareCommitStatusInformationForPullRequest(getSourceRepository(), getSourceAuthor(), getSourceBranch(), getTargetAuthor(), getGitAuthorCredentialsId())
                    } else {
                        echo 'No target branch ... Checking out simply'
                        checkout(githubscm.resolveRepository(getSourceRepository(), getSourceAuthor(), getSourceBranch(), false, getGitAuthorCredentialsId()))
                        githubscm.prepareCommitStatusInformation(getSourceRepository(), getSourceAuthor(), getSourceBranch(), getGitAuthorCredentialsId())
                    }
                    githubscm.setUserConfig('robot', 'kie.apache.org', true)
                    updateGithubCommitStatus('PENDING', 'Started')

                    // Login to final registry if deploy is needed
                    if (shouldDeployImage()) {
                        if (isDeployImageInOpenshiftRegistry()) {
                            cloud.loginOpenShift(getOpenShiftAPI(), env.OPENSHIFT_CREDS_KEY)
                            cloud.loginOpenshiftRegistry(env.CONTAINER_ENGINE, env.CONTAINER_ENGINE_TLS_OPTIONS ?: '')
                        } else if (getDeployImageRegistryUserCredentialsId() && getDeployImageRegistryTokenCredentialsId()) {
                            cloud.loginContainerRegistry(getDeployImageRegistry(), getDeployImageRegistryUserCredentialsId(), getDeployImageRegistryTokenCredentialsId(), env.CONTAINER_ENGINE, env.CONTAINER_ENGINE_TLS_OPTIONS ?: '')
                        }
                    }
                }
            }
        }
        stage('Prepare environment') {
            steps {
                script {
                    // Set the mirror url only if exist
                    if (env.MAVEN_MIRROR_REPOSITORY) {
                        echo "Setup Maven mirror url to '${env.MAVEN_MIRROR_REPOSITORY}'"
                        env.MAVEN_MIRROR_URL = env.MAVEN_MIRROR_REPOSITORY

                        // Ignore self-signed certificates if MAVEN_MIRROR_URL is defined
                        runPythonCommand("python scripts/update-repository.py --build-maven-mirror-url ${MAVEN_MIRROR_URL} --ignore-self-signed-cert")
                    }

                    if (getMavenArtifactRepository()) {
                        echo "Setup Repository url to '${getMavenArtifactRepository()}'"
                        runPythonCommand("python scripts/update-repository.py --repo-urls ${getMavenArtifactRepository()}")
                    }
                }
            }
        }

        stage('Update project version') {
            when {
                expression { params.UPDATE_KOGITO_VERSION != '' }
            }
            steps {
                script {
                    versionCmd = "python scripts/manage-kogito-version.py --bump-to ${params.UPDATE_KOGITO_VERSION} --confirm"
                    if (isRelease()) {
                        versionCmd += " --examples-ref ${getSourceBranch()}"
                    }
                    sh versionCmd
                }
            }
        }

        // Commented as we cannot fully rely on Quarkus platform
        // Should be uncommmented once https://issues.redhat.com/browse/KOGITO-9120 is implemented
        // stage('Setup Quarkus platform') {
        //     steps {
        //         script {
        //             if (getQuarkusPlatformURL()) {
        //                 String kogitoVersion = sh(returnStdout: true, script: 'make display-kogito-version')
        //                 String quarkusPlatformVersion = "kogito-${kogitoVersion}"
        //                 if (getMavenArtifactRepository()) {
        //                     echo "[WARN] Artifacts repository defined in env will override the quarkus platform URL in tests. Make sure the platform artifacts are available on that artifacts repository (you can use a maven group)"
        //                 }
        //                 // Setup quarkus platform repo configuration
        //                 runPythonCommand("python scripts/update-repository.py --repo-url ${getQuarkusPlatformURL()} --ignore-self-signed-cert --quarkus-platform-version ${quarkusPlatformVersion}")
        //             }
        //         }
        //     }
        // }
        stage('Build image') {
            steps {
                script {
                    updateGithubCommitStatus('PENDING', 'Build in progress')

                    int freePort = cloud.findFreePort()
                    env.localRegistryUrl = cloud.startLocalRegistry(freePort)
                    cloud.prepareForDockerMultiplatformBuild([env.localRegistryUrl], [cloud.getDockerIOMirrorRegistryConfig()], false)

                    // Generate the Dockerfile
                    runPythonCommand("make build-image ${getMakeBuildImageArgs()} image_name=${getBuildImageName()} ignore_test=true ignore_tag=true build_options='--dry-run'")

                    // Build multiplatform from generated Dockerfile
                    String squashMessage = "${getBuildImageName()}:${getImageVersion()} squashed"
                    dir('target/image') {
                        cloud.dockerBuildMultiPlatformImages(getBuiltImageTag(), getImageBuildPlatforms(), shouldDeployImage(), squashMessage, false, true)
                    }
                }
            }
        }
        stage('Push tags') {
            when {
                expression { return shouldDeployImage() }
            }
            steps {
                script {
                    int retries = Integer.parseInt(env.MAX_REGISTRY_RETRIES)
                    String imageTag = getBuiltImageTag()
                    if (isDeployLatestTag()) {
                        latestTag = 'latest'
                        cloud.skopeoCopyRegistryImages(imageTag, getBuiltImageTag(latestTag), retries)
                    }
                }
            }
        }
        stage('Setup for testing') {
            when {
                expression { return !shouldSkipTests() }
            }
            steps {
                script {
                    updateTestsCommand = 'python scripts/update-repository.py --tests-only'
                    updateTestsCommand += getMavenArtifactRepository() ? " --repo-url ${getMavenArtifactRepository()}" : ''
                    updateTestsCommand += getTestsKogitoExamplesRef() ? " --examples-ref ${getTestsKogitoExamplesRef()}" : ''
                    updateTestsCommand += getTestsKogitoExamplesURI() ? " --examples-uri ${getTestsKogitoExamplesURI()}" : ''

                    // Launch update tests
                    runPythonCommand(updateTestsCommand)

                    // Debug purpose in case of issue
                    sh 'cat tests/test-apps/clone-repo.sh'
                    sh 'cat scripts/setup-maven.sh'
                }
            }
        }
        stage('Test image') {
            when {
                expression { return !shouldSkipTests() }
            }
            steps {
                script {
                    updateGithubCommitStatus('PENDING', 'Tests in progress')

                    String testImageTag = "${getDeployImageRegistry()}/${getDeployImageNamespace()}/incubator-kie-${getBuildImageName()}:${getImageVersion()}"
                    String builtImageTag = getBuiltImageTag()
                    // Pull and tag to test image
                    sh """
                        docker pull ${builtImageTag}
                        docker tag ${builtImageTag} ${testImageTag}
                    """
                    try {
                        runPythonCommand("make build-image ${getMakeBuildImageArgs()} image_name=${getBuildImageName()} ignore_build=true")
                    } catch (err) {
                        unstable "Testing error(s) for image ${getBuildImageName()}"
                    } finally {
                        junit testResults: 'target/**/*.xml', allowEmptyResults: true
                        archiveArtifacts artifacts: 'target/**/*.xml, **/*.txt, **/*.log', allowEmptyArchive: true
                    }
                }
            }
        }
        stage('Export, Sign and Archive Image and signature') {
            when {
                expression { return shouldExportAndGpgSign() }
            }
            steps {
                script {
                    String resultingFileName = "incubator-kie-${getImageArtifactReleaseVersion()}-${getBuildImageName()}-image.tar.gz"
                    String signatureFileName = "${resultingFileName}.asc"
                    sh """
                        docker pull ${getBuiltImageTag()}
                        docker tag ${getBuiltImageTag()} ${getBuiltDeployImageTag()}
                        docker save ${getBuiltDeployImageTag()} | gzip > ${resultingFileName}
                    """
                    releaseUtils.gpgImportKeyFromStringWithoutPassword(getReleaseGpgSignKeyCredsId())
                    releaseUtils.gpgSignFileDetachedSignatureWithoutPassword(resultingFileName, signatureFileName)
                    releaseUtils.svnUploadFileToRepository(getReleaseSvnRepository(), getReleaseSvnCredsId(), getImageArtifactReleaseVersion(), resultingFileName, signatureFileName)
                }
            }
            post {
                always {
                    script {
                        archiveArtifacts(artifacts: '**/*.tar.gz,**/*.tar.gz.asc', fingerprint: false, allowEmptyArchive: true)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                updateGithubCommitStatusFromBuildResult()
                collectContainerLogs()
                archiveArtifacts artifacts: '**/*-build.log, **/*.log', allowEmptyArchive: true
            }
        }
        cleanup {
            script {
                cleanWs()
            }
        }
    }
}

void collectContainerLogs() {
    sh '''#!/bin/bash
        for container in $(docker container ls --format "{{.Names}}"); do echo "[$container:START]"; docker logs $container; echo "[$container:END]"; done &> containers.log
    '''
}

String getMakeBuildImageArgs() {
    List args = []
    if (getBuildKogitoAppsRef()) {
        args.add("KOGITO_APPS_TARGET_BRANCH=${getBuildKogitoAppsRef()}")
    }
    if (getBuildKogitoAppsURI()) {
        args.add("KOGITO_APPS_TARGET_URI=${getBuildKogitoAppsURI()}")
    }
    args.add("BUILD_ENGINE=${CONTAINER_ENGINE}")
    if (env.CONTAINER_ENGINE_TLS_OPTIONS) {
        args.add("BUILD_ENGINE_TLS_OPTIONS=${CONTAINER_ENGINE_TLS_OPTIONS}")
    }
    return args.join(' ')
}

String getImageVersion() {
    return runPythonCommand('make display-image-version', true).trim()
}

String getBuiltDeployImageTag(String imageTag = '') {
    return "${getDeployImageRegistry()}/${getDeployImageNamespace()}/${getFinalImageName()}:${imageTag ?: getDeployImageTag()}"
}

String getBuiltImageTag(String imageTag = '') {
    if (shouldDeployImage()) {
        return getBuiltDeployImageTag(imageTag)
    }
    return "${env.localRegistryUrl}/${getBuildImageName()}:${githubscm.getCommitHash()}"
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return sh(returnStdout: stdout, script: cmd)
}

////////////////////////////////////////////////////////////////////////
// Deploy image information
////////////////////////////////////////////////////////////////////////

boolean isDeployImageInOpenshiftRegistry() {
    return params.DEPLOY_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getDeployImageRegistryUserCredentialsId() {
    return params.DEPLOY_IMAGE_REGISTRY_USER_CREDENTIALS_ID
}

String getDeployImageRegistryTokenCredentialsId() {
    return params.DEPLOY_IMAGE_REGISTRY_TOKEN_CREDENTIALS_ID
}

String getDeployImageRegistry() {
    return isDeployImageInOpenshiftRegistry() ? getOpenShiftRegistry() : params.DEPLOY_IMAGE_REGISTRY
}

String getDeployImageNamespace() {
    return isDeployImageInOpenshiftRegistry() ? 'openshift' : params.DEPLOY_IMAGE_NAMESPACE
}

String getDeployImageNameSuffix() {
    return params.DEPLOY_IMAGE_NAME_SUFFIX
}

String getDeployImageTag() {
    if (params.DEPLOY_IMAGE_TAG != '') {
        return params.DEPLOY_IMAGE_TAG
    }
    return sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
}

String getFinalImageName() {
    return 'incubator-kie-' + getBuildImageName() + (getDeployImageNameSuffix() ? "-${getDeployImageNameSuffix()}" : '')
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

////////////////////////////////////////////////////////////////////////
// utils
////////////////////////////////////////////////////////////////////////

String getOpenShiftRegistry() {
    String registry = ''
    withCredentials([string(credentialsId: 'OPENSHIFT_REGISTRY', variable: 'OPENSHIFT_REGISTRY')]) {
        registry = env.OPENSHIFT_REGISTRY
    }
    return registry
}

String getOpenShiftAPI() {
    String openShiftAPI = ''
    withCredentials([string(credentialsId: 'OPENSHIFT_API', variable: 'OPENSHIFT_API')]) {
        openShiftAPI = env.OPENSHIFT_API
    }
    return openShiftAPI
}

String getRepoName() {
    return env.REPO_NAME
}

String getBuildImageName() {
    return params.BUILD_IMAGE_NAME
}

String getSourceAuthor() {
    return params.SOURCE_AUTHOR
}

String getSourceRepository() {
    return params.SOURCE_REPOSITORY
}

String getSourceBranch() {
    return params.SOURCE_BRANCH
}

String getTargetAuthor() {
    return env.TARGET_AUTHOR
}

String getTargetBranch() {
    return params.TARGET_BRANCH
}

String getGitAuthorCredentialsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorTokenCredentialsId() {
    return env.GIT_AUTHOR_TOKEN_CREDS_ID
}

boolean shouldDeployImage() {
    return params.DEPLOY_IMAGE
}

boolean shouldExportAndGpgSign() {
    return params.EXPORT_AND_GPG_SIGN_IMAGE
}

String getBuildKogitoAppsRef() {
    return params.BUILD_KOGITO_APPS_REF
}

String getBuildKogitoAppsURI() {
    return params.BUILD_KOGITO_APPS_URI
}

String getTestsKogitoExamplesRef() {
    return params.TESTS_KOGITO_EXAMPLES_REF
}

String getTestsKogitoExamplesURI() {
    return params.TESTS_KOGITO_EXAMPLES_URI
}

boolean shouldSkipTests() {
    return params.SKIP_TESTS
}

List getImageBuildPlatforms() {
    return "${IMAGE_BUILD_PLATFORMS}".split(',') as List
}

String getMavenArtifactRepository() {
    return params.MAVEN_ARTIFACTS_REPOSITORY
}

String getQuarkusPlatformURL() {
    return params.QUARKUS_PLATFORM_URL
}

def updateGithubCommitStatus(String state, String message) {
    githubscm.updateGithubCommitStatus(getBuildImageName(), state, message)
}

def updateGithubCommitStatusFromBuildResult() {
    githubscm.updateGithubCommitStatusFromBuildResult(getBuildImageName())
}

Map getRepositoryInfo() {
    return [
        repository: getRepoName(),
        author: getSourceAuthor(),
        branch: getSourceBranch(),
        credentials_id: getGitAuthorCredentialsId(),
    ]
}

String getTriggeringProjectName() {
    if (currentBuild.upstreamBuilds) {
        return currentBuild.upstreamBuilds[0].projectName
    }
    return ''
}
String getReleaseGpgSignKeyCredsId() {
    return env.RELEASE_GPG_SIGN_KEY_CREDS_ID
}

String getReleaseGpgSignPassphraseCredsId() {
    return env.RELEASE_GPG_SIGN_PASSPHRASE_CREDS_ID
}

String getReleaseSvnRepository() {
    return env.RELEASE_SVN_REPOSITORY
}

String getReleaseSvnCredsId() {
    return env.RELEASE_SVN_CREDS_ID
}

String getImageArtifactReleaseVersion() {
    return params.IMAGE_ARTIFACT_RELEASE_VERSION
}

boolean isRelease() {
    return env.RELEASE ? env.RELEASE.toBoolean() : false
}
