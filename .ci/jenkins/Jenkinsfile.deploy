@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

changesDone = false

BUILT_IMAGES = []
BUILD_FAILED_IMAGES = []
TEST_FAILED_IMAGES = []

pipeline {
    agent {
        label 'rhel8 && !built-in'
    }

    // Needed for local build
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    currentBuild.displayName = params.DISPLAY_NAME ?: currentBuild.displayName

                    checkoutRepo()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }
                }
            }
            post {
                always {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('kogito_artifacts.version', getKogitoArtifactsVersion())
                    }
                }
            }
        }

        stage('Prepare for PR') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    githubscm.createBranch(getPRBranch())
                }
            }
        }

        stage('Setup Quarkus platform version') {
            when {
                expression { isRelease() }
            }
            steps {
                script {
                    if (getQuarkusPlatformVersion()) {
                        runPythonCommand("python3 scripts/update-repository.py --quarkus-platform-version ${getQuarkusPlatformVersion()}")

                        commitAndPushChanges("Update Quarkus Platform version to ${getQuarkusPlatformVersion()}")
                    } else {
                        echo 'No new quarkus version given for the release. Statu quo ...'
                    }
                }
            }
        }

        stage('Update project version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${getProjectVersion()} --confirm"
                    if (getBuildBranch() != 'main') {
                        versionCmd += " --examples-ref ${!isRelease() ? 'nightly-' : ''}${getBuildBranch()}"
                    }
                    if (getKogitoArtifactsVersion()) {
                        versionCmd += " --artifacts-version ${getKogitoArtifactsVersion()}"
                    }
                    runPythonCommand(versionCmd)

                    commitAndPushChanges("Update project version to ${getProjectVersion()}")
                }
            }
        }

        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    sh '''
                        curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/v1.3.6/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                        tar -xzvf cekit-image-validator-runner.tgz
                        chmod +x cekit-image-validator-runner
                    '''
                    sh './cekit-image-validator-runner modules/'
                    getImages().each { image -> sh "./cekit-image-validator-runner ${image}-image.yaml" }
                }
            }
            post {
                always {
                    sh 'rm -rf cekit-image-validator-runner*'
                }
            }
        }

        stage('Build, Push & Test Images') {
            steps {
                script {
                    parallelStages = [:]
                    getImages().each { image ->
                        parallelStages["Build&Test ${image}"] = createBuildAndTestStageClosure(image)
                    }
                    parallel parallelStages
                }
            }
            post {
                always {
                    script {
                        // Store image deployment information
                        String imgPrefix = "${getRepoName()}.image"
                        setDeployPropertyIfNeeded("${imgPrefix}.registry", getDeployImageRegistry())
                        setDeployPropertyIfNeeded("${imgPrefix}.namespace", getDeployImageNamespace())
                        setDeployPropertyIfNeeded("${imgPrefix}.names", getBuiltImages().join(','))
                        setDeployPropertyIfNeeded("${imgPrefix}.name-suffix", getDeployImageNameSuffix())
                        setDeployPropertyIfNeeded("${imgPrefix}.tag", getDeployImageTag())
                    }
                }
            }
        }

        stage('Create PR') {
            when {
                expression {
                    return changesDone && isRelease()
                }
            }
            steps {
                script {
                    def commitMsg = "[${getBuildBranch()}] Update Maven artifacts"
                    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}."
                    if (isRelease()) {
                        commitMsg = "[${getBuildBranch()}] Update project version to ${getProjectVersion()}"
                        prBody += '\nPlease do not merge, it should be merged automatically.'
                    } else if (currentBuild.currentResult != 'SUCCESS') {
                        commitMsg += " (${currentBuild.currentResult})"
                        prBody += '\n\nSuccessful images:\n'
                        getBuiltImages().each {
                            prBody += "- ${it}\n"
                        }
                        if (getBuildFailedImages()) {
                            prBody += '\nBuild failures on those images:\n'
                            getBuildFailedImages().each {
                                prBody += "- ${it}\n"
                            }
                        } else {
                            prBody += '\nImages were all successfully built but some other problem occured in the pipeline execution...\n'
                        }
                        if (getTestFailedImages()) {
                            prBody += '\nTest failures on those images:\n'
                            getTestFailedImages().each {
                                prBody += "- ${it}\n"
                            }
                        } else {
                            prBody += '\nImages were all successfully built but some other problem occured in the pipeline execution...\n'
                        }
                        prBody += '\nSee build url above for more information'
                    }
                    String prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getGitAuthorCredsID())
                    deployProperties["${getRepoName()}.pr.link"] = prLink
                }
            }
            post {
                always {
                    script {
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.uri", "https://github.com/${getGitAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.ref", getPRBranch())
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.uri", "https://github.com/${getGitAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.ref", getBuildBranch())
                    }
                }
            }
        }
        stage('Finalize') {
            steps {
                script {
                    if (getBuildFailedImages()) {
                        currentBuild.currentResult = 'FAILURE'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
                writeFile(file : env.PROPERTIES_FILE_NAME , text : propertiesStr)
                archiveArtifacts artifacts: env.PROPERTIES_FILE_NAME, allowEmptyArchive:true
            }
        }
        unsuccessful {
            sendUnsuccessfulNotification()
        }
        cleanup {
            clean()
        }
    }
}

void sendUnsuccessfulNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Deploy', getNotificationSubject(), [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void sendNotification(String body) {
    emailext body: body,
        subject: getNotificationSubject(),
        to: env.KOGITO_CI_EMAIL_TO
}

String getNotificationSubject() {
    return "[${getBuildBranch()}] Kogito Images"
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false))
}

void commitAndPushChanges(String commitMsg) {
    githubscm.commitChanges(commitMsg)
    githubscm.pushObject('origin', getPRBranch(), getGitAuthorCredsID())
    changesDone = true
}

void clean() {
    util.cleanNode()
}

void createBuildAndTestStageClosure(String image) {
    return  {
        stage("Build&Test ${image}") {
            List buildParams = []
            buildParams.add(string(name: 'DISPLAY_NAME', value: "${params.DISPLAY_NAME} - ${image}"))
            buildParams.add(string(name: 'BUILD_IMAGE_NAME', value: image))
            buildParams.add(string(name: 'SOURCE_AUTHOR', value: isRelease() ? getGitAuthor() : getGitAuthor()))
            buildParams.add(string(name: 'SOURCE_BRANCH', value: isRelease() ? getPRBranch() : getBuildBranch()))

            buildParams.add(string(name: 'MAVEN_ARTIFACTS_REPOSITORY', value: env.MAVEN_ARTIFACT_REPOSITORY ?: (isRelease() ? env.DEFAULT_STAGING_REPOSITORY : '')))
            buildParams.add(string(name: 'BUILD_KOGITO_APPS_URI', value: params.APPS_URI))
            buildParams.add(string(name: 'BUILD_KOGITO_APPS_REF', value: params.APPS_REF))
            buildParams.add(booleanParam(name: 'SKIP_TESTS', value: params.SKIP_TESTS))
            buildParams.add(string(name: 'TESTS_KOGITO_EXAMPLES_URI', value: params.EXAMPLES_URI))
            buildParams.add(string(name: 'TESTS_KOGITO_EXAMPLES_REF', value: params.EXAMPLES_REF))

            buildParams.add(booleanParam(name: 'DEPLOY_IMAGE', value: true))
            buildParams.add(string(name: 'DEPLOY_IMAGE_REGISTRY_CREDENTIALS', value: getDeployImageRegistryCredentials()))
            buildParams.add(string(name: 'DEPLOY_IMAGE_REGISTRY', value: getDeployImageRegistry()))
            buildParams.add(string(name: 'DEPLOY_IMAGE_NAMESPACE', value: getDeployImageNamespace()))
            buildParams.add(string(name: 'DEPLOY_IMAGE_NAME_SUFFIX', value: getDeployImageNameSuffix()))
            buildParams.add(string(name: 'DEPLOY_IMAGE_TAG', value: getDeployImageTag()))
            buildParams.add(booleanParam(name: 'DEPLOY_WITH_LATEST_TAG', value: isDeployLatestTag()))

            def job = build(job: 'kogito-images.build-image', wait: true, parameters: buildParams, propagate: false)
            if (job.result != 'SUCCESS') {
                if (job.result == 'UNSTABLE') {
                    registerTestFailedImage(image)
                    unstable("Tests on ${image} seems to have failed")
                    registerBuiltImage(image)
                } else {
                    registerBuildFailedImage(image)
                    error("Error building ${image}. Please check the logs of the job: ${job.absoluteUrl}")
                }
            } else {
                registerBuiltImage(image)
            }
        }
    }
}

void registerBuiltImage(String imageName) {
    lock("${BUILD_URL} build success") {
        BUILT_IMAGES.add(imageName)
    }
}

void registerBuildFailedImage(String imageName) {
    lock("${BUILD_URL} build failed") {
        BUILD_FAILED_IMAGES.add(imageName)
    }
}

void registerTestFailedImage(String imageName) {
    lock("${BUILD_URL} test failed") {
        TEST_FAILED_IMAGES.add(imageName)
    }
}

List getBuiltImages() {
    return BUILT_IMAGES
}

List getBuildFailedImages() {
    return BUILD_FAILED_IMAGES
}

List getTestFailedImages() {
    return TEST_FAILED_IMAGES
}

////////////////////////////////////////////////////////////////////////
// Deploy image information
////////////////////////////////////////////////////////////////////////


String getDeployImageRegistryCredentials() {
    return params.IMAGE_REGISTRY_CREDENTIALS
}

String getDeployImageRegistry() {
    return params.IMAGE_REGISTRY
}
String getDeployImageNamespace() {
    return params.IMAGE_NAMESPACE
}
String getDeployImageNameSuffix() {
    return params.IMAGE_NAME_SUFFIX
}
String getDeployImageTag() {
    if (params.IMAGE_TAG != '') {
        return params.IMAGE_TAG
    } else {
        return sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

////////////////////////////////////////////////////////////////////////
// utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE ? env.RELEASE.toBoolean() : false
}

String getRepoName() {
    return env.REPO_NAME
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}

String getPRBranch() {
    return "${getProjectVersion() ?: getBuildBranch()}-${env.PR_BRANCH_HASH}"
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getKogitoArtifactsVersion() {
    return params.KOGITO_ARTIFACTS_VERSION
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value) {
        deployProperties[key] = value
    }
}

String[] getImages() {
    if (env.IMAGES_LIST) {
        return env.IMAGES_LIST.split(',')
    }
    return runPythonCommand("make list | tr '\\n' ','", true).trim().split(',')
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return util.runWithPythonVirtualEnv(cmd, 'cekit', stdout)
}

String getQuarkusPlatformVersion() {
    return params.QUARKUS_PLATFORM_VERSION
}