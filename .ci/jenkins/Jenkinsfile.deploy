@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [ : ]

commitDone = false

BUILT_IMAGES = []
BUILD_FAILED_IMAGES = []
TEST_FAILED_IMAGES = []

pipeline {
    agent {
        label 'kie-rhel8 && docker && kie-mem24g && !built-in'
    }

    // Needed for local build
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        JAVA_HOME = "${GRAALVM_HOME}"

        // Linked to node label
        CONTAINER_ENGINE='docker'
        CONTAINER_TLS_OPTIONS=''

        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkoutRepo()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }
                }
            }
            post {
                always {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('kogito_artifacts.version', getKogitoArtifactsVersion())
                    }
                }
            }
        }
        stage('Prepare for PR') {
            when {
                expression { return isRelease() || isCreateChangesPR() }
            }
            steps {
                script {
                    githubscm.forkRepo(getBotAuthorCredsID())
                    githubscm.createBranch(getBotBranch())
                }
            }
        }
        stage('Update project version') {
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${getProjectVersion()} --confirm"
                    if (getBuildBranch() != 'main') {
                        versionCmd += " --examples-ref ${!isRelease() ? 'nightly-' : ''}${getBuildBranch()}"
                    }
                    if (getKogitoArtifactsVersion()) {
                        versionCmd += " --artifacts-version ${getKogitoArtifactsVersion()}"
                    }
                    runPythonCommand(versionCmd)

                    commitChanges("Update project version to ${getProjectVersion()}")
                }
            }
        }
        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    sh '''
                        curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/v1.3.5/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                        tar -xzvf cekit-image-validator-runner.tgz
                        chmod +x cekit-image-validator-runner
                    '''
                    sh './cekit-image-validator-runner modules/'
                    sh './cekit-image-validator-runner image.yaml'
                    getImages().each { image -> sh "./cekit-image-validator-runner ${image}-overrides.yaml" }
                }
            }
            post {
                always {
                    sh 'rm -rf cekit-image-validator-runner*'
                }
            }
        }
        stage('Prepare environment') {
            steps {
                script {
                    // Set the mirror url only if exist
                    if (env.MAVEN_MIRROR_REPOSITORY) {
                        env.MAVEN_MIRROR_URL = env.MAVEN_MIRROR_REPOSITORY

                        // Ignore self-signed certificates if MAVEN_MIRROR_URL is defined
                        runPythonCommand("python3 scripts/update-repository.py --ignore-self-signed-cert")
                    }
                }
            }
        }
        // Commented as we cannot fully rely on Quarkus platform
        // Should be uncommmented once https://issues.redhat.com/browse/KOGITO-9120 is implemented
        // stage('Setup Quarkus platform') {
        //     steps {
        //         script {
        //             String kogitoVersion = sh(returnStdout: true, script: 'make display-kogito-version')
        //             String quarkusPlatformVersion = "kogito-${kogitoVersion}"

        //             if (isRelease()) {
        //                 if (params.QUARKUS_PLATFORM_VERSION) {
        //                     runPythonCommand("python3 scripts/update-repository.py --quarkus-platform-version ${params.QUARKUS_PLATFORM_VERSION}")
        //                 } else {
        //                     echo "No new quarkus version given for the release. Statu quo ..."
        //                 }
        //             } else {
        //                 if (getMavenArtifactRepository()) {
        //                     echo "[WARN] Artifacts repository defined in env will override the quarkus platform URL in tests. Make sure the platform artifacts are available on that artifacts repository (you can use a maven group)"
        //                 }
        //                 // Setup quarkus platform repo configuration
        //                 runPythonCommand("python3 scripts/update-repository.py --repo-url ${QUARKUS_PLATFORM_NEXUS_URL} --ignore-self-signed-cert --quarkus-platform-version ${quarkusPlatformVersion}")
        //             }
        //         }
        //     }
        // }
        stage('Setup for testing') {
            when {
                expression { return !shouldSkipTests() }
            }
            steps {
                script {
                    updateTestsCommand = 'python3 scripts/update-repository.py --tests-only'
                    if (getMavenArtifactRepository()) {
                        // Update repo in tests
                        updateTestsCommand += " --repo-url ${getMavenArtifactRepository()}"
                    }

                    // Set kogito-examples to bot author/branch if release
                    if (params.EXAMPLES_REF) {
                        updateTestsCommand += " --examples-ref ${params.EXAMPLES_REF}"
                    }
                    if (params.EXAMPLES_URI) {
                        updateTestsCommand += " --examples-uri ${params.EXAMPLES_URI}"
                    }

                    // Launch update tests
                    runPythonCommand(updateTestsCommand)

                    // Debug purpose in case of issue
                    sh 'cat tests/test-apps/clone-repo.sh'
                    sh 'cat scripts/setup-maven.sh'
                    sh 'cat tests/features/kogito-s2i-builder.feature'

                    // Prepare local examples
                    runPythonCommand('make clone-repos')
                }
            }
        }
        stage('Build & Test Images') {
            steps {
                script {
                    parallelStages = [:]
                    getImages().each { image ->
                        initWorkspace(image)
                        String workspacePath = getWorkspacePath(image)
                        parallelStages["Build&Test ${image}"] = {
                            stage("Build/Test ${image}") {
                                dir(workspacePath) {
                                    try {
                                        buildImage(image)
                                        registerBuiltImage(image)
                                    } catch (err) {
                                        registerBuildFailedImage(image)
                                        util.archiveConsoleLog(image, 400)
                                        throw err
                                    }
                                    if (!shouldSkipTests()) {
                                        try {
                                            testImage(image)
                                        } catch (err) {
                                            registerTestFailedImage(image)
                                        } finally {
                                            junit testResults: 'target/test/results/*.xml', allowEmptyResults: true
                                            archiveArtifacts artifacts: 'target/test/results/*.xml', allowEmptyArchive: true
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel parallelStages
                }
            }
            post {
                always {
                    script {
                        cleanWorkspaces()
                    }
                }
            }
        }
        stage('Tagging') {
            steps {
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing') {
            steps {
                script {
                    if (isDeployImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getDeployImageRegistryCredentials()) {
                        loginContainerRegistry(getDeployImageRegistry(), getDeployImageRegistryCredentials())
                    }
                    pushImages()

                    if (isQuayRegistry()) {
                        makeQuayImagesPublic()
                    }
                }
            }
            post {
                always {
                    script {
                        // Store image deployment information
                        String imgPrefix = "${getRepoName()}.image"
                        setDeployPropertyIfNeeded("${imgPrefix}.registry", getDeployImageRegistry())
                        setDeployPropertyIfNeeded("${imgPrefix}.namespace", getDeployImageNamespace())
                        setDeployPropertyIfNeeded("${imgPrefix}.names", getBuiltImages().join(','))
                        setDeployPropertyIfNeeded("${imgPrefix}.name-suffix", getDeployImageNameSuffix())
                        setDeployPropertyIfNeeded("${imgPrefix}.tag", getDeployImageTag())
                    }
                }
            }
        }
        stage('Create PR') {
            when {
                expression {
                    return commitDone && (isRelease() || isCreateChangesPR())
                }
            }
            steps {
                script {
                    githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())

                    def commitMsg = "[${getBuildBranch()}] Update Maven artifacts"
                    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}."
                    if (isRelease()) {
                        commitMsg = "[${getBuildBranch()}] Update project version to ${getProjectVersion()}"
                        prBody += '\nPlease do not merge, it should be merged automatically.'
                    } else if (currentBuild.currentResult != 'SUCCESS') {
                        commitMsg += " (${currentBuild.currentResult})"
                        prBody += '\n\nSuccessful images:\n'
                        getBuiltImages().each {
                            prBody += "- ${it}\n"
                        }
                        if (getBuildFailedImages()) {
                            prBody += '\nBuild failures on those images:\n'
                            getBuildFailedImages().each {
                                prBody += "- ${it}\n"
                            }
                        } else {
                            prBody += '\nImages were all successfully built but some other problem occured in the pipeline execution...\n'
                        }
                        if (getTestFailedImages()) {
                            prBody += '\nTest failures on those images:\n'
                            getTestFailedImages().each {
                                prBody += "- ${it}\n"
                            }
                        } else {
                            prBody += '\nImages were all successfully built but some other problem occured in the pipeline execution...\n'
                        }
                        prBody += '\nSee build url above for more information'
                    }
                    String prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID())
                    deployProperties["${getRepoName()}.pr.link"] = prLink

                    if (isCreateChangesPR()) {
                        sendNotification("PR has been created with update Maven artifacts.\nPlease review it here: ${prLink}")
                    }
                }
            }
            post {
                always {
                    script {
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.uri", "https://github.com/${getBotAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.uri", "https://github.com/${getGitAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.ref", getBuildBranch())
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
                writeFile( file : env.PROPERTIES_FILE_NAME , text : propertiesStr)
                archiveArtifacts artifacts: env.PROPERTIES_FILE_NAME, allowEmptyArchive:true
            }
        }
        unsuccessful {
            sendUnsuccessfulNotification()
        }
        cleanup {
            clean()
        }
    }
}

void sendUnsuccessfulNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Deploy', getNotificationSubject(), [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void sendNotification(String body) {
    emailext body: body,
        subject: getNotificationSubject(),
        to: env.KOGITO_CI_EMAIL_TO
}

String getNotificationSubject() {
    return "[${getBuildBranch()}] Kogito Images"
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false))
}

void commitChanges(String commitMsg) {
    githubscm.commitChanges(commitMsg)
    commitDone = true
}

void clean() {
    cleanWs()
    cleanImages()

    // Clean Cekit cache, in case we reuse an old node
    sh 'rm -rf \$HOME/.cekit/cache'
}

void cleanImages() {
    sh "${env.CONTAINER_ENGINE} rm -f \$(${env.CONTAINER_ENGINE} ps -a -q) || date"
    sh "${env.CONTAINER_ENGINE} rmi -f \$(${env.CONTAINER_ENGINE} images -q) || date"
}

void buildImage(String imageName) {
    runPythonCommand("make build-image ${getMakeBuildImageArgs()} image_name=${imageName} ignore_test=true")
}

void testImage(String imageName) {
    runPythonCommand("make build-image ${getMakeBuildImageArgs()} image_name=${imageName} ignore_build=true ignore_test_prepare=true")
}

String getMakeBuildImageArgs() {
    List args = [ "cekit_option='--work-dir .'" ]
    args.add("KOGITO_APPS_TARGET_BRANCH=${getKogitoAppsRef()}")
    if (getKogitoAppsUri()) {
        args.add("KOGITO_APPS_TARGET_URI=${getKogitoAppsUri()}")
    }
    args.add("BUILD_ENGINE=${CONTAINER_ENGINE}")
    if (env.CONTAINER_ENGINE_TLS_OPTIONS) {
        args.add("BUILD_ENGINE_TLS_OPTIONS=${CONTAINER_ENGINE_TLS_OPTIONS}")   
    }
    return args.join(' ')
}

void registerBuiltImage(String imageName) {
    lock("${BUILD_URL} build success") {
        BUILT_IMAGES.add(imageName)
    }
}

void registerBuildFailedImage(String imageName) {
    lock("${BUILD_URL} build failed") {
        BUILD_FAILED_IMAGES.add(imageName)
    }
}

void registerTestFailedImage(String imageName) {
    lock("${BUILD_URL} test failed") {
        TEST_FAILED_IMAGES.add(imageName)
    }
}

void removeBuiltImage (String imageName) {
    lock("${BUILD_URL}") {
        BUILT_IMAGES = BUILT_IMAGES.findAll { it != imageName }
    }
}

List getBuiltImages() {
    return BUILT_IMAGES
}

List getBuildFailedImages() {
    return BUILD_FAILED_IMAGES
}

boolean isBuildFailedImage(String imageName) {
    return BUILD_FAILED_IMAGES.contains(imageName)
}

List getTestFailedImages() {
    return TEST_FAILED_IMAGES
}

void tagImages() {
    for (String imageName : getBuiltImages()) {
        String builtImageFullTag = "quay.io/kiegroup/${imageName}:latest"
        tagImage(builtImageFullTag, buildImageName(imageName))
        if (isDeployLatestTag()) {
            tagImage(builtImageFullTag, buildImageName(imageName, 'latest'))
        }
        String reducedTag = getReducedTag()
        if (reducedTag) {
            tagImage(builtImageFullTag, buildImageName(imageName, reducedTag))
        }
    }
}

void tagImage(String oldImageName, String newImageName) {
    sh "${env.CONTAINER_ENGINE} tag ${oldImageName} ${newImageName}"
}

void pushImages() {
    for (String imageName : getBuiltImages()) {
        pushImage(buildImageName(imageName))
        if (isDeployLatestTag()) {
            pushImage(buildImageName(imageName, 'latest'))
        }
        String reducedTag = getReducedTag()
        if (reducedTag) {
            pushImage(buildImageName(imageName, reducedTag))
        }
    }
}

void pushImage(String fullImageName) {
    retry(env.MAX_REGISTRY_RETRIES) {
        sh "${env.CONTAINER_ENGINE} push ${env.CONTAINER_TLS_OPTIONS} ${fullImageName}"
    }
}

// Set images public on quay. Useful when new images are introduced.
void makeQuayImagesPublic() {
    String namespace = getDeployImageNamespace()
    for (String imageName : getBuiltImages()) {
        String repository = getFinalImageName(imageName)
        echo "Check and set public if needed Quay repository ${namespace}/${repository}"
        try {
            cloud.makeQuayImagePublic(namespace, repository, [ usernamePassword: getDeployImageRegistryCredentials()])
        } catch (err) {
            echo "[ERROR] Cannot set image quay.io/${namespace}/${repository} as visible"
        }
    }
}

String buildImageName(String imageName, String imageTag = '') {
    return "${getDeployImageRegistry()}/${getDeployImageNamespace()}/${getFinalImageName(imageName)}:${imageTag ?: getDeployImageTag()}"
}

String getFinalImageName(String imageName) {
    return getDeployImageNameSuffix() ? "${imageName}-${getDeployImageNameSuffix()}" : imageName
}

String getReducedTag() {
    try {
        String version = getDeployImageTag()
        String[] versionSplit = version.split("\\.")
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch (error) {
        echo "${getDeployImageTag()} cannot be reduced to the format X.Y"
    }
    return ''
}

void loginOpenshift() {
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]) {
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry() {
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && ${env.CONTAINER_ENGINE} login -u anything -p \$(oc whoami -t) ${env.CONTAINER_TLS_OPTIONS} ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId) {
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "${env.CONTAINER_ENGINE} login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} ${env.CONTAINER_TLS_OPTIONS} ${registry}"
    }
}

void setDeployPropertyIfneeded(String key, def value) {
    if (value != null && value != '') {
        deployProperties[key] = value
    }
}

////////////////////////////////////////////////////////////////////////
// Deploy image information
////////////////////////////////////////////////////////////////////////

boolean isDeployImageInOpenshiftRegistry() {
    return params.IMAGE_USE_OPENSHIFT_REGISTRY
}

String getDeployImageRegistryCredentials() {
    return params.IMAGE_REGISTRY_CREDENTIALS
}

String getDeployImageRegistry() {
    return isDeployImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.IMAGE_REGISTRY
}

String getDeployImageNamespace() {
    return isDeployImageInOpenshiftRegistry() ? 'openshift' : params.IMAGE_NAMESPACE
}

String getDeployImageNameSuffix() {
    return params.IMAGE_NAME_SUFFIX
}

String getDeployImageTag() {
    if (params.IMAGE_TAG != '') {
        return params.IMAGE_TAG
    } else {
        return sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
}

boolean isQuayRegistry() {
    return getDeployImageRegistry() == 'quay.io'
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

////////////////////////////////////////////////////////////////////////
// Workspaces
////////////////////////////////////////////////////////////////////////

void initWorkspace(String image) {
    sh "mkdir -p ${getWorkspacePath(image)}"
    sh "rsync -av --progress . ${getWorkspacePath(image)} --exclude workspaces"
}

void cleanWorkspaces() {
    sh "rm -rf ${getWorkspacesPath()}"
}

String getWorkspacesPath() {
    return "${WORKSPACE}/workspaces"
}

String getWorkspacePath(String image) {
    return "${getWorkspacesPath()}/${image}"
}

////////////////////////////////////////////////////////////////////////
// utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE ? env.RELEASE.toBoolean() : false
}

String getRepoName() {
    return env.REPO_NAME
}

boolean isCreateChangesPR() {
    return params.CREATE_PR
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoAppsRef() {
    return params.APPS_REF ?: getBuildBranch()
}

String getKogitoAppsUri() {
    return params.APPS_URI
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getBotBranch() {
    return "${getProjectVersion() ?: getBuildBranch()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor() {
    return env.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID() {
    return env.BOT_CREDENTIALS_ID
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getKogitoArtifactsVersion() {
    return params.KOGITO_ARTIFACTS_VERSION
}

String getMavenArtifactRepository() {
    return env.MAVEN_ARTIFACT_REPOSITORY ?: (isRelease() ? env.DEFAULT_STAGING_REPOSITORY : '')
}

boolean shouldSkipTests() {
    return params.SKIP_TESTS
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value) {
        deployProperties[key] = value
    }
}

String[] getImages() {
    return runPythonCommand("make list | tr '\\n' ','", true).trim().split(',')
}

boolean isThereAnyChanges() {
    return sh(script: 'git status --porcelain', returnStdout: true).trim() != ''
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return sh(returnStdout: stdout, script: """
source ~/virtenvs/cekit/bin/activate 
${cmd}
""")
}
