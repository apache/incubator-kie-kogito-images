// Promote images
@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

pipeline {
    agent {
        label 'rhel8 && podman && !built-in'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }
    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        // Linked to node label
        CONTAINER_ENGINE = 'podman'
        CONTAINER_ENGINE_TLS_OPTIONS = '--tls-verify=false'

        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        GITHUB_REPO = "${REPO_NAME}" // for github-release cli
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }

                    // Login old registry
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != '') {
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }

                    // Login new registry
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != '') {
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }

                    dir(getRepoName()) {
                        checkoutRepo()
                    }

                    installGitHubReleaseCLI()
                    cloud.installSkopeo()
                }
            }
        }
        stage('Promote images') {
            steps {
                script {
                    dir(getRepoName()) {
                        promoteImages()
                    }
                }
            }
        }
        stage('Merge PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        // Merge PR
                        String prLink = getDeployProperty("${getRepoName()}.pr.link")
                        if (prLink) {
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        }

                        if (getGitTag()) {
                            createRelease()
                        }
                    }
                }
            }
        }
        stage('Set next version')
        {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String prLink = ''
                    String nextVersion = getNextVersion()
                    dir('bot') { // Use different folder from `Update PR with released Maven artifacts` to avoid conflicts
                        // Prepare PR
                        checkoutRepo()
                        githubscm.forkRepo(getBotAuthorCredsID())
                        githubscm.createBranch(getSnapshotBranch())

                        // Update version to next snapshot
                        versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${nextVersion} --artifacts-version ${getKogitoArtifactsNextVersion()} --confirm"
                        if (getBuildBranch() != 'main') {
                            versionCmd += " --examples-ref ${getBuildBranch()}"
                        }
                        runPythonCommand(versionCmd)

                        def commitMsg = "[${getBuildBranch()}] Update snapshot version to ${nextVersion}"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
                        githubscm.commitChanges(commitMsg)
                        githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())
                        prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID())
                    }
                    dir(getRepoName()) {
                        if (prLink) {
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendUnsuccessfulNotification()
        }
        cleanup {
            clean()
        }
    }
}

void sendUnsuccessfulNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Promote', getNotificationSubject(), [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void sendNotification(String body) {
    emailext body: body,
        subject: getNotificationSubject()
    to: env.KOGITO_CI_EMAIL_TO
}

String getNotificationSubject() {
    return "[${getBuildBranch()}] Kogito Images"
}

void installGitHubReleaseCLI() {
    sh 'go install github.com/github-release/github-release@latest'
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void clean() {
    cleanWs()
    util.cleanNode()
    cloud.cleanSkopeo()
}

void promoteImages() {
    for (String imageName : getImages()) {
        promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, getNewImageTag()))
        if (isDeployLatestTag()) {
            promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, 'latest'))
        }
        String reducedTag = getReducedTag()
        if (reducedTag) {
            promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, reducedTag))
        }
    }
}

void promoteImage(String oldImageName, String newImageName) {
    cloud.skopeoCopyRegistryImages(oldImageName, newImageName, Integer.parseInt(env.MAX_REGISTRY_RETRIES))
}

// Set images public on quay. Useful when new images are introduced.
void makeQuayNewImagesPublic() {
    String namespace = getNewImageNamespace()
    for (String imageName : getImages()) {
        String repository = getFinalImageName(imageName, getNewImageNameSuffix())
        echo "Check and set public if needed Quay repository ${namespace}/${repository}"
        try {
            cloud.makeQuayImagePublic(namespace, repository, [ usernamePassword: getNewImageRegistryCredentials()])
        } catch (err) {
            echo "[ERROR] Cannot set image quay.io/${namespace}/${repository} as visible"
        }
    }
}

void createRelease() {
    if(githubscm.isReleaseExist(getGitTag(), getGitAuthorCredsID())) {
        githubscm.deleteReleaseAndTag(getGitTag(), getGitAuthorCredsID())
    }
    githubscm.createReleaseWithGeneratedReleaseNotes(getGitTag(), getBuildBranch(), githubscm.getPreviousTag(getGitTag()), getGitAuthorCredsID())
    githubscm.updateReleaseBody(getGitTag(), getGitAuthorCredsID())
}

boolean isReleaseExist() {
    releaseExistStatus = -1
    withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
        releaseExistStatus = sh(returnStatus: true, script: """
            export GITHUB_USER=${getGitAuthor()}
            github-release info --tag ${getGitTag()}
        """)
    }
    return releaseExistStatus == 0
}

void deleteRelease() {
    withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
        sh """
            export GITHUB_USER=${getGitAuthor()}
            github-release delete --tag ${getGitTag()}
        """
    }
}

String getOldImageFullTag(String imageName) {
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${getFinalImageName(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag) {
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${getFinalImageName(imageName, getNewImageNameSuffix())}:${tag}"
}

String getFinalImageName(String imageName, String suffix) {
    return suffix ? "${imageName}-${suffix}" : imageName
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

String getReducedTag() {
    try {
        String version = getNewImageTag()
        String[] versionSplit = version.split("\\.")
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch (error) {
        echo "${getNewImageTag()} cannot be reduced to the format X.Y"
    }
    return ''
}

void loginOpenshift() {
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]) {
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry() {
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && ${env.CONTAINER_ENGINE} login -u anything -p \$(oc whoami -t) ${env.CONTAINER_ENGINE_TLS_OPTIONS ?: ''} ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId) {
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "${env.CONTAINER_ENGINE} login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} ${env.CONTAINER_ENGINE_TLS_OPTIONS ?: ''} ${registry}"
    }
}
void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}
boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}
String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}
String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

////////////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE ? env.RELEASE.toBoolean() : false
}

String getRepoName() {
    return env.REPO_NAME
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION' , 'project.version')
}

String getKogitoArtifactsVersion() {
    artifactsVersion = getParamOrDeployProperty('KOGITO_ARTIFACTS_VERSION' , 'kogito_artifacts.version')
    return artifactsVersion ?: getProjectVersion()
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getPRSourceBranch() {
    return getDeployProperty("${getRepoName()}.pr.source.ref")
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID() {
    return env.BOT_CREDENTIALS_ID
}

String getMavenArtifactRepository() {
    return env.MAVEN_ARTIFACT_REPOSITORY ?: ''
}

String getNextVersion() {
    return util.getNextVersion(getProjectVersion(), 'micro', 'snapshot')
}

// To be later changed by artifacts version parameter
String getKogitoArtifactsNextVersion() {
    return util.getNextVersion(getKogitoArtifactsVersion(), 'micro', 'SNAPSHOT')
}

String getSnapshotBranch() {
    return "${getNextVersion()}-${env.BOT_BRANCH_HASH}"
}

boolean isQuayRegistry(String registry) {
    return registry == 'quay.io'
}

////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return "${getRepoName()}.image"
}

boolean isOldImageInOpenshiftRegistry() {
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials() {
    return params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry() {
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty('BASE_IMAGE_REGISTRY' , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace() {
    return isOldImageInOpenshiftRegistry() ? 'openshift' : getParamOrDeployProperty('BASE_IMAGE_NAMESPACE' , "${getOldImagePrefix()}.namespace")
}

String getOldImageNames() {
    return getParamOrDeployProperty('BASE_IMAGE_NAMES' , "${getOldImagePrefix()}.names")
}

String getOldImageNameSuffix() {
    return getParamOrDeployProperty('BASE_IMAGE_NAME_SUFFIX' , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag() {
    return getParamOrDeployProperty('BASE_IMAGE_TAG' , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry() {
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials() {
    return params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry() {
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace() {
    return isNewImageInOpenshiftRegistry() ? 'openshift' : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix() {
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag() {
    return params.PROMOTE_IMAGE_TAG
}

String[] getImages() {
    String images = getOldImageNames() ?: env.IMAGES_LIST ?: runPythonCommand("make list | tr '\\n' ','", true).trim()
    return images.split(',')
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return util.runWithPythonVirtualEnv(cmd, 'cekit', stdout)
}
