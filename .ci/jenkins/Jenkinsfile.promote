/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// Promote images
@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        CONTAINER_ENGINE = 'docker'
        CONTAINER_ENGINE_TLS_OPTIONS = ''

        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }
                    util.waitForDocker()

                    readDeployProperties()

                    assert getProjectVersion()
                    assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())

                    // Login old registry
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != '') {
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }

                    // Login new registry
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != '') {
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }

                    dir(getRepoName()) {
                        checkoutRepo()
                    }
                }
            }
        }

        stage('Promote images') {
            steps {
                script {
                    dir(getRepoName()) {
                        promoteImages()
                    }
                }
            }
        }

        stage('Merge PR and tag') {
            steps {
                script {
                    dir(getRepoName()) {
                        // Merge PR
                        String prLink = getDeployProperty("${getRepoName()}.pr.link")
                        if (prLink) {
                            githubscm.mergePR(prLink, getGitAuthorPushCredsId())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorPushCredsId())
                        }
                    }
                }
            }
        }

        stage('Create release') {
            steps {
                script {
                    dir(getRepoName()) {
                        if (githubscm.isReleaseExist(getGitTag(), getGitAuthorCredsId())) {
                            githubscm.deleteReleaseAndTag(getGitTag(), getGitAuthorPushCredsId())
                        }
                        githubscm.createReleaseWithGeneratedReleaseNotes(getGitTag(), getBuildBranch(), githubscm.getPreviousTagFromVersion(getGitTag()), getGitAuthorPushCredsId())
                        githubscm.updateReleaseBody(getGitTag(), getGitAuthorPushCredsId())
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendUnsuccessfulNotification()
        }
        cleanup {
            clean()
        }
    }
}

void sendUnsuccessfulNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Promote', getNotificationSubject(), [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void sendNotification(String body) {
    emailext body: body,
        subject: getNotificationSubject()
    to: env.KOGITO_CI_EMAIL_TO
}

String getNotificationSubject() {
    return "[${getBuildBranch()}] Kogito Images"
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void promoteImages() {
    for (String imageName : getImages()) {
        promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, getNewImageTag()))
        if (isDeployLatestTag()) {
            promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, 'latest'))
        }
        String reducedTag = getReducedTag()
        if (reducedTag) {
            promoteImage(getOldImageFullTag(imageName), getNewImageFullTag(imageName, reducedTag))
        }
    }
}

void promoteImage(String oldImageName, String newImageName) {
    cloud.skopeoCopyRegistryImages(oldImageName, newImageName, Integer.parseInt(env.MAX_REGISTRY_RETRIES))
}

// Set images public on quay. Useful when new images are introduced.
void makeQuayNewImagesPublic() {
    String namespace = getNewImageNamespace()
    for (String imageName : getImages()) {
        String repository = getFinalImageName(imageName, getNewImageNameSuffix())
        echo "Check and set public if needed Quay repository ${namespace}/${repository}"
        try {
            cloud.makeQuayImagePublic(namespace, repository, [ usernamePassword: getNewImageRegistryCredentials()])
        } catch (err) {
            echo "[ERROR] Cannot set image quay.io/${namespace}/${repository} as visible"
        }
    }
}

String getOldImageFullTag(String imageName) {
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${getFinalImageName(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag) {
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${getFinalImageName(imageName, getNewImageNameSuffix())}:${tag}"
}

String getFinalImageName(String imageName, String suffix) {
    return suffix ? "${imageName}-${suffix}" : imageName
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

String getReducedTag() {
    try {
        String version = getNewImageTag()
        String[] versionSplit = version.split("\\.")
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch (error) {
        echo "${getNewImageTag()} cannot be reduced to the format X.Y"
    }
    return ''
}

void loginOpenshift() {
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]) {
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry() {
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && ${env.CONTAINER_ENGINE} login -u anything -p \$(oc whoami -t) ${env.CONTAINER_ENGINE_TLS_OPTIONS ?: ''} ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId) {
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "${env.CONTAINER_ENGINE} login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} ${env.CONTAINER_ENGINE_TLS_OPTIONS ?: ''} ${registry}"
    }
}

void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}
boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}
String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}
String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

////////////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////////////

String getRepoName() {
    return env.REPO_NAME
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION' , 'project.version')
}

String getKogitoArtifactsVersion() {
    artifactsVersion = getParamOrDeployProperty('KOGITO_ARTIFACTS_VERSION' , 'kogito_artifacts.version')
    return artifactsVersion ?: getProjectVersion()
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

boolean isQuayRegistry(String registry) {
    return registry == 'quay.io'
}

////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return "${getRepoName()}.image"
}

boolean isOldImageInOpenshiftRegistry() {
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials() {
    return params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry() {
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty('BASE_IMAGE_REGISTRY' , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace() {
    return isOldImageInOpenshiftRegistry() ? 'openshift' : getParamOrDeployProperty('BASE_IMAGE_NAMESPACE' , "${getOldImagePrefix()}.namespace")
}

String getOldImageNames() {
    return getParamOrDeployProperty('BASE_IMAGE_NAMES' , "${getOldImagePrefix()}.names")
}

String getOldImageNameSuffix() {
    return getParamOrDeployProperty('BASE_IMAGE_NAME_SUFFIX' , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag() {
    return getParamOrDeployProperty('BASE_IMAGE_TAG' , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry() {
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials() {
    return params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry() {
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace() {
    return isNewImageInOpenshiftRegistry() ? 'openshift' : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix() {
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag() {
    return params.PROMOTE_IMAGE_TAG
}

String[] getImages() {
    String images = getOldImageNames() ?: env.IMAGES_LIST ?: runPythonCommand("make list | tr '\\n' ','", true).trim()
    return images.split(',')
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return sh(returnStdout: stdout, script: cmd)
}
