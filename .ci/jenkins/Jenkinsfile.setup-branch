/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkoutRepo(getRepoName(), getBuildBranch())
                }
            }
        }
        stage('Update project version') {
            steps {
                script {
                    dir(getRepoName()) {
                        versionCmd = "python scripts/manage-kogito-version.py --bump-to ${getKogitoVersion()} --confirm"
                        versionCmd += " --examples-ref nightly-${getBuildBranch()}"
                        if (getKogitoArtifactsVersion()) {
                            versionCmd += " --artifacts-version ${getKogitoArtifactsVersion()}"
                        }
                        runPythonCommand(versionCmd)
                    }
                }
            }
        }
        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    dir(getRepoName()) {
                        sh '''
                            curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/v1.3.6/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                            tar -xzvf cekit-image-validator-runner.tgz
                            chmod +x cekit-image-validator-runner
                        '''
                        sh './cekit-image-validator-runner modules/'
                        getImages().each { image -> sh "./cekit-image-validator-runner ${image}-image.yaml" }
                    }
                }
            }
            post {
                always {
                    dir(getRepoName()) {
                        sh 'rm -rf cekit-image-validator-runner*'
                    }
                }
            }
        }
        stage('Clean release notes') {
            when {
                expression { isMainBranch() }
            }
            steps {
                script {
                    String releaseNotesFilename = 'RELEASE_NOTES.md'
                    dir(getRepoName()) {
                        sh "rm -rf ${releaseNotesFilename}"
                        writeFile(file: releaseNotesFilename, text: getCleanedReleaseNotes())
                    }
                }
            }
        }
        stage('Update branch') {
            steps {
                script {
                    dir(getRepoName()) {
                        if (githubscm.isThereAnyChanges()) {
                            githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
                            githubscm.commitChanges("[${getBuildBranch()}] Update version to ${getKogitoVersion()}")
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorPushCredsId())
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendUnsuccessfulNotification()
        }
        cleanup {
            cleanWs()
        }
    }
}

void sendUnsuccessfulNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Setup branch', "[${getBuildBranch()}] Kogito Images", [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void checkoutRepo(String repository, String branch) {
    dir(repository) {
        deleteDir()
        checkout(githubscm.resolveRepository(repository, getGitAuthor(), branch, false, getGitAuthorCredsId()))
        sh "git checkout ${branch}"
    }
}

////////////////////////////////////////////////////////////////////////
// utils
////////////////////////////////////////////////////////////////////////

String getRepoName() {
    return env.REPO_NAME
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getGitAuthorCredsId() {
    return "${GIT_AUTHOR_CREDS_ID}"
}

String getGitAuthorPushCredsId() {
    return "${GIT_AUTHOR_PUSH_CREDS_ID}"
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getKogitoArtifactsVersion() {
    return params.KOGITO_ARTIFACTS_VERSION
}

String[] getImages() {
    return runPythonCommand("make list | tr '\\n' ','", true).trim().split(',')
}

boolean isMainBranch() {
    return env.IS_MAIN_BRANCH?.toBoolean()
}

String getCleanedReleaseNotes() {
    return '''
<!-- Keep them in alphabetical order -->
## Enhancements

## Bug Fixes

## Known Issues

'''
}

void runPythonCommand(String cmd, boolean stdout = false) {
    return sh(returnStdout: stdout, script: cmd)
}