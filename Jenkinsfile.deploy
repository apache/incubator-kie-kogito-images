@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [ : ]

commitDone = false

pipeline {
    agent {
        label 'kogito-image-slave && !master'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        JAVA_HOME = "${GRAALVM_HOME}"

        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    // Set the mirror url only if no artifact repository is given
                    if (env.MAVEN_MIRROR_REPOSITORY) {
                        echo 'Set Maven mirror url'
                        env.MAVEN_MIRROR_URL = env.MAVEN_MIRROR_REPOSITORY
                    }

                    checkoutRepo()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('kogito_artifacts.version', getKogitoArtifactsVersion())
                    }
                }
            }
        }
        stage('Prepare for PR') {
            when {
                expression { return isRelease() || isCreateChangesPR() }
            }
            steps {
                script {
                    githubscm.forkRepo(getBotAuthorCredsID())
                    githubscm.createBranch(getBotBranch())
                }
            }
        }
        stage('Update project version') {
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${getProjectVersion()} --confirm"
                    if (getBuildBranch() != 'master') {
                        versionCmd += " --examples-ref ${getBuildBranch()}"
                    }
                    if (getKogitoArtifactsVersion()) {
                        versionCmd += " --artifacts-version ${getKogitoArtifactsVersion()}"
                    }
                    sh versionCmd

                    commitChanges("Update project version to ${getProjectVersion()}")
                }
            }
        }
        stage('Update Maven information') {
            steps {
                script {
                    // Update artifacts
                    updateArtifactCmd = 'python3 scripts/update-maven-artifacts.py'
                    if (getMavenArtifactRepository() != '') {
                        updateArtifactCmd += " --repo-url ${getMavenArtifactRepository()} --ignore-self-signed-cert"
                    }
                    sh updateArtifactCmd

                    // Debug purpose in case of issue
                    sh 'cat modules/kogito-data-index-infinispan/module.yaml'
                    sh 'cat modules/kogito-data-index-mongodb/module.yaml'
                    sh 'cat modules/kogito-trusty/module.yaml'
                    sh 'cat modules/kogito-explainability/module.yaml'
                    sh 'cat modules/kogito-jobs-service/module.yaml'
                    sh 'cat modules/kogito-management-console/module.yaml'
                    sh 'cat modules/kogito-task-console/module.yaml'
                    sh 'cat modules/kogito-trusty-ui/module.yaml'
                    sh 'cat modules/kogito-jit-runner/module.yaml'

                    if (isThereAnyChanges()) {
                        commitChanges('Updated Maven artifacts')
                    } else {
                        echo 'No changes to commit'
                    }
                }
            }
        }
        stage('Validate CeKit Image and Modules descriptors') {
            steps {
                script {
                    sh '''
                        curl -Ls https://github.com/kiegroup/kie-cloud-tools/releases/download/1.0-SNAPSHOT/cekit-image-validator-runner.tgz --output cekit-image-validator-runner.tgz
                        tar -xzvf cekit-image-validator-runner.tgz
                        chmod +x cekit-image-validator-runner
                    '''
                    sh './cekit-image-validator-runner modules/'
                    sh './cekit-image-validator-runner image.yaml'
                    getImages().each { image -> sh "./cekit-image-validator-runner ${image}-overrides.yaml" }
                }
            }
            post {
                always {
                    sh 'rm -rf cekit-image-validator-runner*'
                }
            }
        }
        stage('Setup for testing') {
            when {
                expression { return !shouldSkipTests() }
            }
            steps {
                script {
                    updateTestsCommand = 'python3 scripts/update-tests.py'
                    if (getMavenArtifactRepository()) {
                        // Update repo in tests
                        updateTestsCommand += " --repo-url ${getMavenArtifactRepository()}"
                    }

                    // Set kogito-examples to bot author/branch if release
                    if (params.EXAMPLES_REF) {
                        updateTestsCommand += " --examples-ref ${params.EXAMPLES_REF}"
                    }
                    if (params.EXAMPLES_URI) {
                        updateTestsCommand += " --examples-uri ${params.EXAMPLES_URI}"
                    }

                    //Ignore self-signed certificates if MAVEN_MIRROR_URL and/or artifact repo is defined
                    if (env.MAVEN_MIRROR_URL || getMavenArtifactRepository()) {
                        updateTestsCommand += ' --ignore-self-signed-cert'
                    }
                    // Launch update tests
                    sh updateTestsCommand

                    // Debug purpose in case of issue
                    sh 'cat tests/test-apps/clone-repo.sh'
                    sh 'cat tests/features/kogito-builder.feature'

                    // Prepare local examples
                    sh 'make clone-repos'
                }
            }
        }
        stage('Build Images') {
            steps {
                script {
                    // Init workspaces before build
                    getImages().each { image -> initWorkspace(image) }
                    // Build images
                    launchParallelForEachImage('Build', { img -> buildImage(img) })
                }
            }
            post {
                always {
                    script {
                        cleanWorkspaces()
                    }
                }
            }
        }
        stage('Test Images') {
            when {
                expression { return !params.SKIP_TESTS }
            }
            steps {
                script {
                    // Init workspaces before test
                    getImages().each { image -> initWorkspace(image) }
                    // Test images
                    launchParallelForEachImage('Test', { img -> testImage(img) })
                }
            }
            post {
                always {
                    script {
                        cleanWorkspaces()
                    }
                }
            }
        }
        stage('Tagging') {
            steps {
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing') {
            steps {
                script {
                    if (isDeployImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getDeployImageRegistryCredentials()) {
                        loginContainerRegistry(getDeployImageRegistry(), getDeployImageRegistryCredentials())
                    }
                    pushImages()

                    if (isQuayRegistry() && getDeployQuayTokenCredentials()) {
                        makeQuayImagesPublic()
                    }
                }
            }
            post {
                success {
                    script {
                        // Store image deployment information
                        String imgPrefix = "${getRepoName()}.image"
                        setDeployPropertyIfNeeded("${imgPrefix}.registry", getDeployImageRegistry())
                        setDeployPropertyIfNeeded("${imgPrefix}.namespace", getDeployImageNamespace())
                        setDeployPropertyIfNeeded("${imgPrefix}.name-suffix", getDeployImageNameSuffix())
                        setDeployPropertyIfNeeded("${imgPrefix}.tag", getDeployImageTag())
                    }
                }
            }
        }
        stage('Create PR') {
            when {
                expression {
                    return commitDone && (isRelease() || isCreateChangesPR())
                }
            }
            steps {
                script {
                    githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())

                    def commitMsg = "[${getBuildBranch()}] Update Maven artifacts"
                    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}."
                    if (isRelease()) {
                        commitMsg = "[${getBuildBranch()}] Update project version to ${getProjectVersion()}"
                        prBody += '\nPlease do not merge, it should be merged automatically.'
                    }
                    String prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID())
                    deployProperties["${getRepoName()}.pr.link"] = prLink

                    if (isCreateChangesPR()) {
                        String bodyMsg = "PR has been created with update Maven artifacts.\nPlease review it here: ${prLink}"

                        emailext body: bodyMsg, subject: "[${getBuildBranch()}][d] Kogito Images pipeline", to: env.KOGITO_CI_EMAIL_TO 
                    }
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.uri", "https://github.com/${getBotAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.uri", "https://github.com/${getGitAuthor()}/${getRepoName()}")
                        setDeployPropertyIfNeeded("${getRepoName()}.pr.target.ref", getBuildBranch())
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
                writeFile( file : env.PROPERTIES_FILE_NAME , text : propertiesStr)
                archiveArtifacts artifacts: env.PROPERTIES_FILE_NAME, allowEmptyArchive:true
                clean()
            }
        }
    }
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false))
}

void commitChanges(String commitMsg) {
    githubscm.commitChanges(commitMsg)
    commitDone = true
}

void clean() {
    cleanWs()
    cleanImages()

    // Clean Cekit cache, in case we reuse an old node
    sh 'rm -rf \$HOME/.cekit/cache'
}

void cleanImages() {
    sh 'docker rm -f \$(docker ps -a -q) || date'
    sh 'docker rmi -f \$(docker images -q) || date'
}

void launchParallelForEachImage(stageNamePrefix, executeOnImage) {
    parallelStages = [:]
    getImages().each { image ->
        parallelStages["${stageNamePrefix} ${image}"] = {
            dir(getWorkspacePath(image)) {
                executeOnImage(image)
            }
        }
    }
    parallel parallelStages
}

void buildImage(image) {
    sh "make build-image image_name=${image} ignore_test=true cekit_option='--work-dir .'"
}

void testImage(image) {
    try {
        sh "make build-image image_name=${image} ignore_build=true cekit_option='--work-dir .'"
    } finally {
        junit testResults: 'target/test/results/*.xml', allowEmptyResults: true
    }
}

void tagImages() {
    for (String imageName : getImages()) {
        sh "docker tag quay.io/kiegroup/${imageName}:latest ${buildImageName(imageName)}"
    }
}

void pushImages() {
    for (String imageName : getImages()) {
        sh "docker push ${buildImageName(imageName)}"
    }
}

// Set images public on quay. Useful when new images are introduced.
void makeQuayImagesPublic() {
    String namespace = getDeployImageNamespace()
    for (String imageName : getImages()) {
        String repository = getFinalImageName(imageName)
        echo "Check and set public if needed Quay repository ${namespace}/${repository}"
        try {
            cloud.makeQuayImagePublic(namespace, repository, getDeployQuayTokenCredentials())
        } catch (err) {
            echo "[ERROR] Cannot set image quay.io/${namespace}/${repository} as visible"
        }
    }
}

String buildImageName(String imageName) {
    return "${getDeployImageRegistry()}/${getDeployImageNamespace()}/${getFinalImageName(imageName)}:${getDeployImageTag()}"
}

String getFinalImageName(String imageName) {
    return getDeployImageNameSuffix() ? "${imageName}-${getDeployImageNameSuffix()}" : imageName
}

void loginOpenshift() {
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]) {
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry() {
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && docker login -u anything -p \$(oc whoami -t) ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId) {
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "docker login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} ${registry}"
    }
}

void setDeployPropertyIfneeded(String key, def value) {
    if (value != null && value != '') {
        deployProperties[key] = value
    }
}

////////////////////////////////////////////////////////////////////////
// Deploy image information
////////////////////////////////////////////////////////////////////////

boolean isDeployImageInOpenshiftRegistry() {
    return params.IMAGE_USE_OPENSHIFT_REGISTRY
}

String getDeployQuayTokenCredentials() {
    return params.QUAY_TOKEN_CREDENTIALS
}

String getDeployImageRegistryCredentials() {
    return params.IMAGE_REGISTRY_CREDENTIALS
}

String getDeployImageRegistry() {
    return isDeployImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.IMAGE_REGISTRY
}

String getDeployImageNamespace() {
    return isDeployImageInOpenshiftRegistry() ? 'openshift' : params.IMAGE_NAMESPACE
}

String getDeployImageNameSuffix() {
    return params.IMAGE_NAME_SUFFIX
}

String getDeployImageTag() {
    if (params.IMAGE_TAG != '') {
        return params.IMAGE_TAG
    } else {
        return sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }
}

boolean isQuayRegistry() {
    return getDeployImageRegistry() == 'quay.io'
}

////////////////////////////////////////////////////////////////////////
// Workspaces
////////////////////////////////////////////////////////////////////////

void initWorkspace(String image) {
    sh "mkdir -p ${getWorkspacePath(image)}"
    sh "rsync -av --progress . ${getWorkspacePath(image)} --exclude workspaces"
}

void cleanWorkspaces() {
    sh "rm -rf ${getWorkspacesPath()}"
}

String getWorkspacesPath() {
    return "${WORKSPACE}/workspaces"
}

String getWorkspacePath(String image) {
    return "${getWorkspacesPath()}/${image}"
}

////////////////////////////////////////////////////////////////////////
// utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getRepoName() {
    return env.REPO_NAME
}

boolean isCreateChangesPR() {
    return params.CREATE_PR
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getBotBranch() {
    return "${getProjectVersion() ?: getBuildBranch()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor() {
    return env.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID() {
    return env.BOT_CREDENTIALS_ID
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getKogitoArtifactsVersion() {
    return params.KOGITO_ARTIFACTS_VERSION
}

String getMavenArtifactRepository() {
    return env.MAVEN_ARTIFACT_REPOSITORY ?: (isRelease() ? env.DEFAULT_STAGING_REPOSITORY : '')
}

boolean shouldSkipTests() {
    return params.SKIP_TESTS
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value != null && value != '') {
        deployProperties[key] = value
    }
}

String[] getImages() {
    return sh(script: "make list | tr '\\n' ','", returnStdout: true).trim().split(',')
}

boolean isThereAnyChanges() {
    return sh(script: 'git status --porcelain', returnStdout: true).trim() != ''
}
