// Promote images
@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

pipeline {
    agent {
        label 'kogito-image-slave && !master'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        // Deploy job url to retrieve deployment.properties
        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')

        // Git information which can override `deployment.properties`
        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')

        // Base images information which can override `deployment.properties`
        booleanParam(name: 'BASE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Override `deployment.properties`. Set to true if base image should be retrieved from Openshift registry.In this case, BASE_IMAGE_REGISTRY_CREDENTIALS, BASE_IMAGE_REGISTRY and BASE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'BASE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Override `deployment.properties`. Base Image registry credentials to use to deploy images. Will be ignored if no BASE_IMAGE_REGISTRY is given')
        string(name: 'BASE_IMAGE_REGISTRY', defaultValue: '', description: 'Override `deployment.properties`. Base image registry')
        string(name: 'BASE_IMAGE_NAMESPACE', defaultValue: '', description: 'Override `deployment.properties`. Base image namespace')
        string(name: 'BASE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Override `deployment.properties`. Base image name suffix')
        string(name: 'BASE_IMAGE_TAG', defaultValue: '', description: 'Override `deployment.properties`. Base image tag')

        // Promote images information
        booleanParam(name: 'PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if base image should be deployed in Openshift registry.In this case, PROMOTE_IMAGE_REGISTRY_CREDENTIALS, PROMOTE_IMAGE_REGISTRY and PROMOTE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'PROMOTE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Promote Image registry credentials to use to deploy images. Will be ignored if no PROMOTE_IMAGE_REGISTRY is given')
        string(name: 'PROMOTE_IMAGE_REGISTRY', defaultValue: '', description: 'Promote image registry')
        string(name: 'PROMOTE_IMAGE_NAMESPACE', defaultValue: '', description: 'Promote image namespace')
        string(name: 'PROMOTE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Promote image name suffix')
        string(name: 'PROMOTE_IMAGE_TAG', defaultValue: '', description: 'Promote image tag')
        booleanParam(name: 'DEPLOY_WITH_LATEST_TAG', defaultValue: false, description: 'Set to true if you want the deployed images to also be with the `latest` tag')

        // Release information which can override `deployment.properties`
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'KOGITO_ARTIFACTS_VERSION', defaultValue: '', description: 'Optional. If artifacts\' version is different from PROJECT_VERSION.')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')
        string(name: 'MAVEN_ARTIFACT_REPOSITORY', defaultValue: '', description: 'Maven repository where the released jar artifacts are present. To be set if git author is not `kiegroup` and repository is different from JBoss repository.')
        string(name: 'RELEASE_NOTES', defaultValue: '', description: 'Release notes to be added. If none provided, a default one will be given.')

        // Bot author information. Set as params for easy testing.
        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')

        // Main author creds
        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')
        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')

        CI = true // Used by scripts

        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        GITHUB_REPO = 'kogito-images' // for github-release cli
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }

                    dir('kogito-images') {
                        checkoutRepo()
                    }

                    installGitHubReleaseCLI()
                }
            }
        }
        stage('Update PR with released Maven artifacts') {
            when {
                expression { return isRelease() && getPRSourceBranch() != '' }
            }
            steps {
                script {
                    // Update maven information with new artifacts from Maven central in the PR
                    dir('kogito-images-update') {
                        checkoutRepo()
                        githubscm.forkRepo(getBotAuthorCredsID())

                        // Get the working branch
                        sh 'git fetch origin'
                        sh "git checkout ${getPRSourceBranch()}"

                        // Update artifacts
                        updateArtifactCmd = 'python3 scripts/update-maven-artifacts.py'
                        if (getMavenArtifactRepository() != '') {
                            updateArtifactCmd += " --repo-url ${getMavenArtifactRepository()}"
                        }
                        sh updateArtifactCmd

                        // Debug purpose in case of issue
                        sh 'cat modules/kogito-data-index-infinispan/module.yaml'
                        sh 'cat modules/kogito-data-index-mongodb/module.yaml'
                        sh 'cat modules/kogito-trusty-infinispan/module.yaml'
                        sh 'cat modules/kogito-trusty-redis/module.yaml'
                        sh 'cat modules/kogito-explainability/module.yaml'
                        sh 'cat modules/kogito-jobs-service/module.yaml'
                        sh 'cat modules/kogito-management-console/module.yaml'
                        sh 'cat modules/kogito-task-console/module.yaml'
                        sh 'cat modules/kogito-trusty-ui/module.yaml'

                        try {
                            githubscm.commitChanges('Setup Maven artifacts to released ones')
                            githubscm.pushObject('origin', getPRSourceBranch(), getBotAuthorCredsID())
                        } catch (err) {
                            emailext body: "Seems like no change is to be committed.\nPlease review in ${env.BUILD_URL}console.\n" +
                                    "And take your decision here: ${env.BUILD_URL}input",
                                    subject: "[${getBuildBranch()}] Release Pipeline",
                                    to: env.KOGITO_CI_EMAIL_TO
                            input message: 'Should the pipeline continue ?', ok: 'Yes'
                        }
                    }
                }
            }
        }
        stage('Pull "old" images') {
            steps {
                script {
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != '') {
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }
                    dir('kogito-images') {
                        pullImages()
                    }
                }
            }
        }
        stage('Tag images') {
            steps {
                script {
                    dir('kogito-images') {
                        tagImages()
                    }
                }
            }
        }
        stage('Pushing') {
            steps {
                script {
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != '') {
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }
                    dir('kogito-images') {
                        pushImages()
                    }
                }
            }
        }
        stage('Merge PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir('kogito-images') {
                        // Merge PR
                        String prLink = getDeployProperty('kogito-images.pr.link')
                        if (prLink != '') {
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        }

                        if (getGitTag() != '') {
                            def releaseName = "Kogito Images Version ${getProjectVersion()}"
                            def description = params.RELEASE_NOTES != '' ? params.RELEASE_NOTES : "We are glad to announce that the Kogito ${getProjectVersion()} release is now available!"
                            withCredentials([string(credentialsId: params.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
                                sh """
                                    export GITHUB_USER=${getGitAuthor()}
                                    github-release release --tag ${getGitTag()} --target '${getBuildBranch()}' --name '${releaseName}' --description '${description}' --pre-release
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Set next version')
        {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String prLink = ''
                    String nextVersion = getNextVersion()
                    dir('kogito-images-snapshot') { // Use different folder from `Update PR with released Maven artifacts` to avoid conflicts
                        // Prepare PR
                        checkoutRepo()
                        githubscm.forkRepo(getBotAuthorCredsID())
                        githubscm.createBranch(getSnapshotBranch())

                        // Update version to next snapshot
                        versionCmd = "python3 scripts/manage-kogito-version.py --bump-to ${nextVersion} --artifacts-version ${getKogitoArtifactsNextVersion()} --confirm"
                        if (getBuildBranch() != 'master') {
                            versionCmd += " --examples-ref ${getBuildBranch()}"
                        }
                        sh versionCmd

                        def commitMsg = "[${getBuildBranch()}] Update snapshot version to ${nextVersion}"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
                        githubscm.commitChanges(commitMsg)
                        githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())
                        prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID())
                    }
                    dir('kogito-images') {
                        if (prLink != '') {
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            clean()
        }
    }
}

void installGitHubReleaseCLI() {
    sh 'go get github.com/github-release/github-release'
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository('kogito-images', getGitAuthor(), getBuildBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void clean() {
    cleanWs()
    cleanImages()
}

void cleanImages() {
    sh 'podman rm -f \$(podman ps -a -q) || date'
    sh 'podman rmi -f \$(podman images -q) || date'
}

void pullImages() {
    for (String imageName : getImages()) {
        sh "podman pull ${getOldImageFullTag(imageName)}"
    }
}

void tagImages() {
    for (String imageName : getImages()) {
        sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, getNewImageTag())}"
        if (isDeployLatestTag()) {
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, 'latest')}"
        }
        String reducedTag = getReducedTag()
        if (reducedTag != '') {
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, reducedTag)}"
        }
    }
}

void pushImages() {
    for (String imageName : getImages()) {
        sh "podman push ${getNewImageFullTag(imageName, getNewImageTag())}"
        if (isDeployLatestTag()) {
            sh "podman push ${getNewImageFullTag(imageName, 'latest')}"
        }
        String reducedTag = getReducedTag()
        if (reducedTag != '') {
            sh "podman push ${getNewImageFullTag(imageName, reducedTag)}"
        }
    }
}

String getOldImageFullTag(String imageName) {
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${buildImageNameWithSuffix(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag) {
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${buildImageNameWithSuffix(imageName, getNewImageNameSuffix())}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if (suffix != null && suffix != '') {
        finalImageName += '-' + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag() {
    return params.DEPLOY_WITH_LATEST_TAG
}

String getReducedTag() {
    try {
        String version = getNewImageTag()
        String[] versionSplit = version.split("\\.")
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch (error) {
        echo "${getNewImageTag()} cannot be reduced to the format X.Y"
    }
    return ''
}

void loginOpenshift() {
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]) {
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry() {
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && podman login -u anything -p \$(oc whoami -t) --tls-verify=false ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId) {
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "podman login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} --tls-verify=false ${registry}"
    }
}
void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}
boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}
String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}
String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

////////////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty('release') == 'true')
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION' , 'project.version')
}

String getKogitoArtifactsVersion() {
    artifactsVersion = getParamOrDeployProperty('KOGITO_ARTIFACTS_VERSION' , 'kogito_artifacts.version')
    return artifactsVersion ?: getProjectVersion()
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')
}

String getPRSourceBranch() {
    return getDeployProperty('kogito-images.pr.source.ref')
}

String getGitAuthor() {
    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')
}

String getGitAuthorCredsID() {
    return params.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID() {
    return params.BOT_CREDENTIALS_ID
}

String getMavenArtifactRepository() {
    return params.MAVEN_ARTIFACT_REPOSITORY
}

String getNextVersion() {
    return util.getNextVersion(getProjectVersion(), 'micro', 'snapshot')
}

// To be later changed by artifacts version parameter
String getKogitoArtifactsNextVersion() {
    return util.getNextVersion(getKogitoArtifactsVersion(), 'micro', 'SNAPSHOT')
}

String getSnapshotBranch() {
    return "${getNextVersion()}-${env.BOT_BRANCH_HASH}"
}

////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return 'kogito-images.image'
}

boolean isOldImageInOpenshiftRegistry() {
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials() {
    return isOldImageInOpenshiftRegistry() ? '' : params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry() {
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty('BASE_IMAGE_REGISTRY' , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace() {
    return isOldImageInOpenshiftRegistry() ? 'openshift' : getParamOrDeployProperty('BASE_IMAGE_NAMESPACE' , "${getOldImagePrefix()}.namespace")
}

String getOldImageNameSuffix() {
    return getParamOrDeployProperty('BASE_IMAGE_NAME_SUFFIX' , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag() {
    return getParamOrDeployProperty('BASE_IMAGE_TAG' , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry() {
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials() {
    return isNewImageInOpenshiftRegistry() ? '' : params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry() {
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace() {
    return isNewImageInOpenshiftRegistry() ? 'openshift' : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix() {
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag() {
    return params.PROMOTE_IMAGE_TAG
}

String[] getImages() {
    return sh(script: "make list | tr '\\n' ','", returnStdout: true).trim().split(',')
}
